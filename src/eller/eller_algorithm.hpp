#ifndef A1_MAZE_CPP_1_SRC_ELLER_ELLER_ALGORITHM_HPP_
#define A1_MAZE_CPP_1_SRC_ELLER_ELLER_ALGORITHM_HPP_

/************************************************************
 * @file eller_algorithm.hpp
 * @brief Реализация алгоритма Эллера для построения идеального лабиринта
 ************************************************************/

#include <iostream>
#include <random>
#include <vector>

#include "../maze/maze.hpp"

namespace s21 {

/************************************************************
 * @brief Класс с реализацией алгоритма Эллера
 ************************************************************/

class EllerAlgorithm {
 public:
  EllerAlgorithm(Maze& maze);

  /************************************************************
   * @brief Основная функция для создания идеального лабиринта
   *
   * @param rows Количество строк в лабиринте
   * @param cols Количество столбцов в лабиринте
   ************************************************************/
  void createMaze(int rows, int cols);

  /************************************************************
   * @brief Метод для изменения размеров веекторов
   *
   * @param rows Количество строк в лабиринте
   * @param cols Количество столбцов в лабиринте
   ************************************************************/
  void resizeVectors(int rows, int cols);

 private:
  /************************************************************
   * @brief Поля в которых хранятся размеры лабиринтов
   *
   * Размер столбцов и строк лабиринта соотвественно
   ************************************************************/
  int &cols, &rows;

  /************************************************************
   * @brief Счетчик
   *
   * Используется для того, чтобы задавать уникальные множества
   ************************************************************/
  int counter{1};

  /************************************************************
   * @brief Ссылка на матрицу горизонтальных стенок в лабиринте
   ************************************************************/
  std::vector<std::vector<bool>>& horizontal;

  /************************************************************
   * @brief Ссылка на матрицу вертикальных стенок в лабиринте
   ************************************************************/
  std::vector<std::vector<bool>>& vertical;

  /************************************************************
   * @brief Вектор множеств
   ************************************************************/
  std::vector<int> field_of_sets{0};

  /************************************************************
   * @brief Метод который заполняет вектор множеств нулевыми значениями
   ************************************************************/
  void fillEmptyValue();

  /************************************************************
   * @brief Метод, в котором каждой ячейке присваевается уникальное значение
   ************************************************************/
  void assignUniqueValues();

  /************************************************************
   * @brief Метод, добавляющий правые вертикальные стенки в данной строке
   *лабиринта
   *
   * @param row Индекс строки в лабиринте
   ************************************************************/
  void createTheRightBorders(int row);

  /************************************************************
   * @brief Метод, добавляющий нижние горизонтальные стенки в данной строке
   *лабиринта
   *
   * @param row Индекс строки в лабиринте
   ************************************************************/
  void createBorderAtTheBottom(int row);

  /************************************************************
   * @brief Метод, сбрасывающий field_of_sets для новой строки
   *
   * @param row Индекс строки в лабиринте
   ************************************************************/
  void addingNewLine(int rows);

  /************************************************************
   * @brief Метод, заканчивающий постройку последней строки в лабиринте
   ************************************************************/
  void addingEndLine();

  /************************************************************
   * @brief Метод, который объединяет ячейки в одно множество
   *
   * @param ind Индекс ячейки
   * @param value Значение множества
   ************************************************************/
  void mergeTwoSets(int ind, int value);

  /************************************************************
   * @brief Метод, который считает количество уникальных множеств
   *
   * @param value Значение, которое хранит множество
   ************************************************************/
  int countOfUniqueSets(int value);

  /************************************************************
   * @brief Метод, считывающий количество нижних стенок в определенном множестве
   *и в определенной строке лабиринта
   *
   * @param value Значение множества
   * @param row Индекс строки в лабиринте
   ************************************************************/
  int BottomBorderCount(int value, int row);

  /************************************************************
   * @brief Метод, проверяющий правильность расстановки горизонтальных стен
   *
   * @param row Индекс строки в лабиринте
   ************************************************************/
  void CheckBottomBorders(int row);
};

}  // namespace s21

#endif  // A1_MAZE_CPP_1_SRC_ELLER_ELLER_ALGORITHM_HPP_
