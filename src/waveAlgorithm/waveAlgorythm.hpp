#ifndef A1_MAZE_CPP_1_SRC_WAVEALGORYTHM_HPP_
#define A1_MAZE_CPP_1_SRC_WAVEALGORYTHM_HPP_

/************************************************************
 * @file waveAlgorithm.hpp
 * @brief Реализация волнового алгоритма для нахождения кратчайшего пути из
 *одной точки до другой
 ************************************************************/

#include <iostream>
#include <vector>

#include "../maze/maze.hpp"

namespace s21 {

/************************************************************
 * @brief Структура, хранящая координаты точки и шаг
 ************************************************************/
struct Point {
  int x, y;
  int step = 1;
  // Point(int x, int y, int step): x{x}, y{y}, step{step} {};
  bool operator!=(const Point& other);
};

/************************************************************
 * @brief Класс с реализацией волнового алгоритма
 ************************************************************/
class WaveAlgorythm {
  /************************************************************
   * @brief Начальная точка
   ************************************************************/
  Point start{0, 0, 0};

  /************************************************************
   * @brief Конечная точка
   ************************************************************/
  Point end{0, 0, 0};

  /************************************************************
   * @brief Матрица, хранящая шаги
   ************************************************************/
  std::vector<std::vector<int>> field;
  const Maze& maze;

 public:
  /************************************************************
   * @brief Конструктор
   *
   * @param start Начальная точка
   * @param end Конечная точка
   * @param maze Ссылка на объект класса Maze
   ************************************************************/
  WaveAlgorythm(Point start, Point end, const Maze& maze);

  /************************************************************
   * @brief Метод поиска конечной точки
   ************************************************************/
  bool findEndPoint();

  /************************************************************
   * @brief Метод возвращающий кратчайший путь от конечной точки до начальной
   ************************************************************/
  std::vector<Point> path();
};

}  // namespace s21

#endif  // A1_MAZE_CPP_1_SRC_WAVEALGORYTHM_HPP_
